// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int             @id @default(autoincrement())
  email           String          @unique
  name            String
  tasks           Task[]
  taskGroups      TaskGroup[]
  groupCategories GroupCategory[]
  taskTags        TaskTag[]
}

model Task {
  id          String        @id @default(uuid())
  title       String
  description String
  status      TaskStatus
  startDate   DateTime?
  endDate     DateTime?
  startTime   DateTime?
  endTime     DateTime?
  reminder    DateTime?
  priority    TaskPriority?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
  deleted     Boolean       @default(false)
  TaskGroup   TaskGroup?    @relation(fields: [taskGroupId], references: [id])
  taskGroupId String?
  tags        TaskTag[]
  User        User?         @relation(fields: [userId], references: [id])
  userId      Int?
}

model TaskGroup {
  id              String         @id @default(uuid())
  name            String
  color           String
  tasks           Task[]
  archived        Boolean        @default(false)
  pinned          Boolean        @default(false)
  GroupCategory   GroupCategory? @relation(fields: [groupCategoryId], references: [id])
  groupCategoryId String?
  User            User?          @relation(fields: [userId], references: [id])
  userId          Int?
}

model GroupCategory {
  id     String      @id @default(uuid())
  name   String
  groups TaskGroup[]
  User   User?       @relation(fields: [userId], references: [id])
  userId Int?
}

model TaskTag {
  id     String  @id @default(uuid())
  name   String
  color  String
  tasks  Task[]
  taskId String?
  User   User?   @relation(fields: [userId], references: [id])
  userId Int?
}

enum TaskStatus {
  PENDING
  SUCCESS
  FAIL
}

enum TaskPriority {
  HIGH
  MEDIUM
  LOW
}
